%% New analysis script for analysis of diffusion data
% I dont really like how disorganized the file and function structure is in
% the old version. This is part of a new branch I made called
% structure_organization in GitHub to try and organize the data into neater
% structures and more sensible functions. I was inspired to do this by
% digging into Sean's 2D-IR analysis code.

% The main thing I want to do is eliminate the FTIRExperiment.m class and
% just use a structure with named fields. This would make it more flexible
% to add fields as new parameters and independent variables arise. There
% isn't really a need for too many methods. The basic file structure will
% just be one structure to keep all the data and metadata, and several
% functions inside the repo for analysis.

% To build this, I will go through the data analysis on a qualitative level
% to see what parameters and functions are needed. Then try to organize
% everything.
%% FULL DATA ANALYSIS of diffusion experiment - from start to finish - 

% ---- Variables that require user manual input will be surrounded ----
    % like this
% ----

%%
% ---- IMPORTANT!!! Input the correct data right from the start. This will put
% all the data in the right place. If the date is wrong, it could overwrite
% previous analysis.
date_of_experiment = "2025-05-16";
% ----

% ---- here put your path to CHEM-SGR (end with a slash). This will be necessary
% throughout the script.
isilon_path = "/Volumes/CHEM-SGR/";
% ----

year_of_experiment = year(datetime(date_of_experiment));
data_path = isilon_path + "sgr-ftir.chem.pitt.edu/" + year_of_experiment + "/" + date_of_experiment;

try
    cd(data_path)
catch ME
    if ME.identifier == "MATLAB:cd:NonExistentFolder"
        warning("An error ocurred accessing the data. Make sure the data exists and the path is correct.")
        try
            cd(isilon_path)
        catch ME2
            if ME2.identifier == "MATLAB:cd:NonExistentFolder"
                warning("Cannot access Isilon. Make sure you are connected to Isilon and the path is correct.")
            end
        end
    end
end

%% Basic experimental metadata

% --- experimental parameters ---
volume = 0.07;  % in microliters
path_length = 12;  % in microns
time_delay = 120;  % in seconds
temperature = 25; % in celsius
sample_name = "50% EMIM NTF2 in PEGDA";
your_name = "Matt";
% ------------

% Make the data structure

data_struct = struct('date',date_of_experiment,...
    'volume',volume,'path_length',path_length,'time_delay',time_delay,...
    'temperature',temperature,'sample_name',sample_name,...
    'experimenter',your_name);

% Much more will be added to this throughout the script

%% Step 1: process the image

% Load the image from Isilon

% ---- path to the image within CHEM-SGR (end with a slash) ----
image_path = "sgr-kiralux-camera.chem.pitt.edu/2025-05-16/";
% ------------

% ---- name of the image file ----
image_filename = "50EMIMNTF2inPEGDA_20250516_pre-diffusion_roomtemp.tif";
% ------------

% Process the image

% Convert the radius to distance
% ------------
units = "um";
path_to_ref = isilon_path + "sgr-kiralux-camera.chem.pitt.edu/2025-05-09/";
reference_image = "scaled_reticle01.tif";
reference_pts = [1476 1939;824 828];
reference_length = 2000;
% ------------

% Get the radius from the image
[radius_pixels,displacement_pixels,params,gel_fig] = radius_from_image(isilon_path+image_path+image_filename,"image scale",25,"dx definition","from center","radius definition","centroid");
length_per_pixel = get_distance_per_pixel(path_to_ref,reference_image,reference_pts,reference_length,units,"image scale",10);
radius = radius_pixels*length_per_pixel;
displacement = displacement_pixels*length_per_pixel;
data_struct.radius = radius;
data_struct.displacement = displacement;
fprintf("r = %4f um; dx = %4f um\n",radius,displacement)
%% Save the data so far
% make a neat structure
image_processing.path = image_path;
image_processing.filename = image_filename;
image_processing.radius_pixels = radius_pixels;
image_processing.displacement_pixels = displacement_pixels;
image_processing.params = params;
image_processing.units = units;
image_processing.path_to_ref = path_to_ref;
image_processing.reference_image = reference_image;
image_processing.reference_pts = reference_pts;
image_processing.reference_length = reference_length;
image_processing.length_per_pixel = length_per_pixel;

data_struct.image_processing = image_processing;
data_struct.radius = radius;
data_struct.displacement = displacement;
%% ---- END OF STEP 1 ----

%% Step 2: Fit the FTIR peaks to obtain the uptake curve

%% Load in the spectra
cd ~
% --- the indicies of the spectra you wish to use ----
spectra_nums = [1:50]; 
file_prefix = '50EMIMNTF2inPEGDA_20250516_room_';
% ----

cd(data_path)
[spectra,freq] = LoadSpectra(data_path,file_prefix,spectra_nums);
freq = freq(:,1);
freq = freq(:);

fprintf("Successfully imported " + size(spectra,2) + " spectra.\n")

% Frequency axis must be increasing
if freq(2) - freq(1) > 0
    freq = flip(freq);
end
% Subtract to the initial spectrum
sub_data = spectra - spectra(:,1);

t = get_timestamps_from_files(data_path,'fileroot',file_prefix,...
    'filenums',spectra_nums,'relative',true);

data_struct.spectra = sub_data;
data_struct.freq_axis = freq;
data_struct.t = t;
data_struct.file_prefix = file_prefix;
data_struct.spectra_nums = spectra_nums;
data_struct.difference_spectra = true;
%% Guesses for FTIR peak fitting, by eye
% ---- Which spectrum will you match to? Usually the last one is good.
trial_spectrum = 50;
% ----

% set the fit range. Usually doesn't need to be changed
range1 = [2290 2390];

% ---- User-input starting point values ----
sp.center = 2340; % center frequency
sp.wg = 1.7; % gaussian width
sp.wl = 1.7; % lorentzian width
sp.a1 = 2.25;  % main peak height
sp.a2 = 0.07; % expected Boltzmann factor for bend
sp.a3 = 0.0; % gas lines
sp.c0 = 0.0; % vertical offset
sp.c1 = 0; % baseline slope
% ----

%fit function requires fliipped inputs
freq = flip(data_struct.freq_axis);
s = flip(data_struct.spectra(:,trial_spectrum));


%get x and y data for the fit
ind1 = find(freq>=range1(1) & freq<range1(2));
x = freq(ind1);
ydata = s(ind1);

%plot the fitted function using user parameters
yfit = co2GasLineFitFunction(x,sp.center,sp.wg,sp.wl,sp.a1,sp.a2,sp.a3,sp.c0,sp.c1);
res = ydata-yfit;
sse = sum(res.^2);

try
    figure(peak_fit_sp.Number);
catch ME
    switch ME.identifier
        case "MATLAB:undefinedVarOrClass"
            peak_fit_sp = figure;
        case "MATLAB:class:InvalidHandle"
            clear peak_fit_sp
            peak_fit_sp = figure;
    end
end
clf
plot(x,ydata,'o',x,yfit,x,res-0.05,'r-o')
%% Do the FTIR peak fit
T = tic; %time the fitting for later display
[ftir_peak_fit,params] = co2_peak_fit(data_struct.spectra,data_struct.freq_axis,range1,sp);
stop = toc(T);
fprintf("Fitting took %4f seconds.\n",stop)

data_struct.ftir_peak_fit = ftir_peak_fit;
data_struct.ftir_peak_fit_params = params;
data_struct.conc_over_time = conc_over_time(data_struct);
data_struct.ftir_peak_fit_params.trial_spectrum = trial_spectrum;
%% Plotting the uptake curve for viewing
try
    figure(uptake_curve_fig.Number);
catch ME
    switch ME.identifier
        case "MATLAB:undefinedVarOrClass"
            uptake_curve_fig = figure;
        case "MATLAB:class:InvalidHandle"
            clear peak_fit_sp
            uptake_curve_fig = figure;
    end
end
clf

% number of spectra to show
n = size(data_struct.spectra,2);

%find the indicies for the amount of spectra desired
spectraIndicies = zeros(1,n);
interval = ceil(size(data_struct.spectra,2)/n);
for ii = 1:n
    spectraIndicies(ii) = (ii*interval);
end

for ii = spectraIndicies
    temp = data_struct.ftir_peak_fit(ii).fobj;
    pf = co2GasLineFitFunction(data_struct.ftir_peak_fit(ii).x,temp.center,temp.w_g,temp.w_l,...
        temp.a1,temp.a2,0,0,0);
    plot(subplot(2,1,1),data_struct.ftir_peak_fit(ii).x,pf)
    hold on
end
title('Fitted Spectra')
xlabel('Wavenumbers (cm^{-1})')
ylabel('Absorbance (AU)')
box off
set(gca,'TickDir','out')
hold off

plot(subplot(2,1,2),data_struct.t,data_struct.conc_over_time,'o-','color','blue');
hold on
title('Concentration Over Time')
xlabel('Time (s)')
ylabel('Concentration (M)')
box off
set(gca,'TickDir','out')
hold off

set(gcf,'Units','normalized')
set(gcf,'Color','w')
set(gcf,'Position',[0.5 0 0.35 1])
%% ---- END OF STEP 2 ----

%% Step 3: Fit for single diffusion coefficient

%% Guesses for uptake curve fitting, by eye
t = data_struct.t;
y = data_struct.conc_over_time;
A = data_struct.radius;
nmax = 150;
rres = 50;
rlim = 350;
sigma = 704;
dx = data_struct.displacement;
dy = 0;

% ---- User input starting values
%     D    C   
sp = [120  0.245 0]; % put guess here
ub = [1e5 1e3];
lb = [0 0];
% ----

try
    figure(uptake_fit_sp.Number);
catch ME
    switch ME.identifier
        case "MATLAB:undefinedVarOrClass"
            uptake_fit_sp = figure;
        case "MATLAB:class:InvalidHandle"
            clear peak_fit_sp
            uptake_fit_sp = figure;
    end
end
clf
hold on
plot(t,y)
ymodel = diffusion_moving_beam(t,sp(1),A,sp(2),nmax,sigma,dx,dy,"rlim",rlim,'t0',-100,'dx definition',...
    data_struct.image_processing.params.dx_definition);
res = y(:) - ymodel(:);
plot(t,ymodel)
plot(t,res-0.025,'ro')
errs(1) = sum((res).^2);
errs(2) = std(res);
fprintf("SSE: " + errs(1) + "; Std. res: " + errs(2) + "\n")
%% Do the uptake curve fitting

%set up options and type
opts = fitoptions('Method','NonlinearLeastSquares',...
    'Lower',lb,'Upper',ub,'StartPoint',sp,...
    'Display','Iter',...
    'Weights',ones(size(y))*1/errs(2),...
    'TolFun',1e-16,...
    'TolX',1e-16);

ft = fittype(@(D,C,t) diffusion_moving_beam(t,D,A,C,nmax,sigma,dx,dy,"rlim",rlim,...
    'dx definition',data_struct.image_processing.params.dx_definition),...
    'independent',{'t'},...
    'dependent','absorbance',...
    'coefficients',{'D','C'},...
    'options',opts);

%set up structure for storing output
out = struct('x',[],'ydata',[],'yfit',[],'res',[],...
    'fobj',[],'G',[],'O',[]);

tic

%do the fit
[fobj,G,O] = fit(t(:),y(:),ft);

toc

%get results
yfit = fobj(t);
out.x = t;
out.ydata = y;
out.yfit = yfit;
out.res = y - yfit;
out.fobj = fobj;
out.G = G;
out.O = O;

if out.O.exitflag < 1
    warning('Curve fit did not converge!!! Results might not be trustworthy.');
end

params.A = A;
params.nmax = nmax;
params.rlim = rlim;
params.sigma = sigma;
params.dx = dx;
params.dy = dy;
params.sp = sp;
params.lb = lb;
params.ub = ub;
params.dx_definition = data_struct.image_processing.params.dx_definition;
params.opts = opts;
params.fittype = ft;
data_struct.uptake_fit = out; 
data_struct.uptake_fit_params = params;
data_struct.uptake_fit_method = "diffusion_moving_beam.m";
%% display fit result
try
    figure(uptake_fit_result.Number);
catch ME
    switch ME.identifier
        case "MATLAB:undefinedVarOrClass"
            uptake_fit_result = figure;
        case "MATLAB:class:InvalidHandle"
            clear peak_fit_sp
            uptake_fit_result = figure;
    end
end
clf

fitresult = data_struct.uptake_fit;

plot(fitresult.x,fitresult.ydata,...
    'o','MarkerSize',5,'MarkerEdgeColor','blue','MarkerFaceColor','blue')
hold on
plot(fitresult.x,fitresult.yfit,...
    'red','LineWidth',1.5)
residuals = fitresult.ydata(:) - fitresult.yfit(:);
plot(fitresult.x,(residuals*1 - 0.02),'o','MarkerEdgeColor','red')
legend('Data points','Fitted curve','Location','northwest')
xlabel('Time (s)')
ylabel('Concentration (M)')
hold off


% get confidence intervals
ci = confint(fitresult.fobj);

readout = [string(fitresult.fobj.D)]
others = ["95% Confidence Interval is "+ci(1)+" to "+ci(2)+".";...
    "R^2 = "+string(fitresult.G.rsquare)]

fitresult.fobj
%% Save the data
cd(data_path)
tic
save(date_of_experiment + "_analyzed_data.mat","data_struct")
toc
%% Update lab notebook with results

% ---- PUT IN THE CORRECT NOTEBOOK PAGE TITLE ---
notebook = 'Matt Lab Notebook';
folder = 'Experiments';
page_title = '2025-05-12 Diffusion of CO2 in 75% EMIM NTF2 in PEGDA';
% ----

cd(data_path)
obj = labarchivesCallObj('notebook',notebook,...
    'folder',folder,...
    'page',page_title);
% microscope photo
figure(gel_fig.Number)
obj = obj.updateFigureAttachment('caption','Kiralux camera photo of the sample annotated with calculated values');
% uptake curve
figure(uptake_curve_fig.Number)
obj = obj.updateFigureAttachment;
% single diffusion fitting result
figure(uptake_fit_result.Number)
caption = "Single diffusion coefficient fitting: ";
coeffs = coeffnames(f.diffusionFitResult.fobj);
units = ["um^2/s" "M"];
if numel(units) ~= numel(coeffs)
    error("Cannot match all fitting parameters with a unit.")
end
for ii = 1:numel(coeffs)
   std_devs{ii} = (ci(2,ii) - ci(1,ii))/4;
   caption = caption + coeffs{ii} + " = " + f.diffusionFitResult.fobj.(coeffs{ii})...
       + " ± " + std_devs{ii} + " " + units(ii) + ", ";
end
obj = obj.updateFigureAttachment('caption',caption);
%% ---- END OF STEP 3 ----

%% Step 4: Fit for double diffusion coefficient

% Proceed to the double_diffusion_fitting.m script for this part. You will
% need to have run this entire script for it to work as it will draw from
% the .mat files you saved here.
